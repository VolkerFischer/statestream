# -*- coding: utf-8 -*-
# Copyright (c) 2017 - for information on the respective copyright owner
# see the NOTICE file and/or the repository https://github.com/boschresearch/statestream
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.



name: test_plasticity_hebbian
agents: 1024
neuron_pools:
    image:
        shape: [1, 28, 28]
    label:
        shape: [10, 1, 1]
    hidden:
        shape: [64, 1, 1]
        act: relu
        device: gpu:0
    prediction:
        shape: [10, 1, 1]
        device: gpu:0
    error:
        shape: [10, 1, 1]
        device: gpu:0
synapse_pools:
    sp_hidden:
        source: [[image]]
        target: hidden
    sp_err_pred:
        source: [[prediction]]
        target: error
        init W_0_0: id
    sp_err_gt:
        source: [[label]]
        target: error
        init W_0_0: -id
    sp_error:
        source: [[hidden]]
        target: error
    sp_prediction:
        source: [[hidden]]
        target: prediction
        share params:
            W_0_0: [sp_error, W_0_0]
plasticities:
    regularizer:
        device: cpu
        type: L_regularizer
        L1: 0.02
        L2: 0.01
        optimizer: grad_desc
        lr: 1e-6
        parameter: [[sp, sp_error, W_0_0]]
    hebbian:
        device: cpu
        type: hebbian
        modus: anti_hebbian
        optimizer: grad_desc
        source: hidden
        target: error
        lr: 1e-4
        parameter: [[sp, sp_error, W_0_0]]
interfaces:
    roman_numerals:
        type: roman_numerals
        in: [rn_pred]
        out: [rn_image, rn_label]
        remap:
            rn_image: image
            rn_label: label
            rn_pred: prediction
 
 